from pptx import Presentation
from pptx.util import Inches
from datetime import date

def generate_ppt(metrics_data, ai_summaries):
    """
    Simulates the generation of a PowerPoint Presentation (PPTX) file.
    In a real application, this would use generated charts (saved as images)
    and the AI text to populate slides.
    """
    
    # --- PPTX Generation Simulation ---
    # Since we cannot write files directly in this environment, 
    # this function confirms success and returns the file path.

    # 1. Create Presentation
    prs = Presentation()

    # 2. Title Slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = "Q3 Program Health Dashboard"
    subtitle.text = f"Executive Summary - Generated by AI on {date.today()}"
    
    # 3. Executive Summary Slide
    bullet_slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(bullet_slide_layout)
    slide.shapes.title.text = "Executive Program Status"
    body = slide.shapes.placeholders[1].text_frame
    body.text = ai_summaries.get('executive_summary', 'AI summary not available.')
    
    # 4. Metric Slides (Simulated)
    # This loop would normally generate a slide for each metric, 
    # insert a chart image, and the corresponding AI summary.
    
    # Simulating data insertion for one slide
    slide = prs.slides.add_slide(bullet_slide_layout)
    slide.shapes.title.text = "Velocity & Completion Trend"
    tf = slide.shapes.placeholders[1].text_frame
    tf.text = ai_summaries.get('velocity', 'Velocity summary missing.')
    p = tf.add_paragraph()
    p.text = ai_summaries.get('completion', 'Completion summary missing.')
    
    # --- Saving the File ---
    # In a real environment, this saves the file:
    file_path = "Program_Health_Report.pptx"
    prs.save(file_path)
    
    return "Program_Health_Report.pptx"
